# -*- coding: utf-8 -*-
# @Time : 2024/7/22 16:54
# @Author : ordar
# @Project : aaaa
# @File : f.py
# @Python: 3.7.5
import os
from urllib.parse import quote


def path_to_link(pa):
    """
    将文件路径转换为链接
    :param pa:
    :return:
    """
    if os.path.isdir(pa):
        pa = pa + "/"
        pa = pa[1:]  # 去除首字符.
        return f"* [{pa}]({quote(pa)})"
    if os.path.isfile(pa):
        if str(pa).endswith(".md"):
            pt = pa[:len(pa) - 3]
            pa = pa[1:]  # 去除首字符.
            return f"* [{pt}]({quote(pa)})"            


def make_readme(path):
    """
    在每个文件夹下的生成readme
    :param path:
    :return:
    """
    for root, dirs, files in os.walk(path):
        # print(root,dirs,files)
        readme = os.path.join(root, "README.md")
        links = []
        for i in dirs:
            links.append(os.path.join(root, i))
        for j in files:
            links.append(os.path.join(root, j))

        with open(readme, "w", encoding="utf8") as f:
            for link in links:
                f.write(path_to_link(link))
                f.write("\n")


def black_list_dir():
    a = [".", "./static", r".\static"]
    return a


def path_to_tile(pa):
    """
    添加标题
    :param pa:
    :return:
    """
    if pa not in black_list_dir():
        pa = pa[1:]  # 去除首字符.
        return f"\n## [{pa}]({quote(pa)}/)\n"
    else:
        return None


def make_root_readme(path):
    """
    生成root下的readme
    :param path:
    :return:
    """
    root_readme = os.path.join(path, "README.md")
    root_readme_content = ""
    for root, dirs, files in os.walk(path):
        # print(root, dirs, files)
        sub_readme = os.path.join(root, "README.md")
        title = path_to_tile(root)
        if not title:
            continue
        else:
            root_readme_content = root_readme_content + title
            with open(sub_readme, "r", encoding="utf8") as fi:
                sub_readme_content = fi.read()
            root_readme_content = root_readme_content + sub_readme_content
    with open(root_readme, "w", encoding="utf8") as f:
        f.write(root_readme_content)


def make_navbar(path):
    """
    生成navbar
    :param path:
    :return:
    """
    root_readme = os.path.join(path, "README.md")


if __name__ == '__main__':
    # 测试示例
    make_readme(".")
    make_root_readme(".")
