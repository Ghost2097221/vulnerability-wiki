# -*- coding: utf-8 -*-
# @Time : 2024/7/11 18:14
# @Author : ordar
# @Python: 3.7.5
import sys
import re
import subprocess


def dingding_sendmsg(msg, token, secret):
    import dingtalkchatbot.chatbot as cb
    webhook = f"https://oapi.dingtalk.com/robot/send?access_token={token}"
    ding = cb.DingtalkChatbot(webhook, secret=secret)
    ding.send_text(msg='{}'.format(msg), is_at_all=False)


def exec_command(command):
    """
    执行命令
    :param command:
    :return:
    """
    try:
        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, close_fds=True)
        # command_results = p.stdout.readline().decode("gbk")
        stdout, stderr = p.communicate()    # 记录错误日志文件
        stdout = stdout.decode("utf8")
        stderr = stderr.decode("utf8")
        returncode = p.returncode
        if returncode == 0:
            print(f"执行命令成功")
        else:
            print(f"执行命令失败")
        return returncode, stdout, stderr
    except Exception as e:
        print(f"执行命令失败 {str(e)}")


def grep_gitlog_head(gitlog):
    """
    正则匹配git commit 头
    :param gitlog:
    :return:
    """
    grep_result = {"success":False, "commit_head":0,"commit_auth":0,"commit_date":0,"commit_msg":0}
    a = re.findall(r"(commit \w+\nAuthor: (.*?) <.*?>\nDate: +(\w+ \w+ \d+ \d+:\d+:\d+ \d+) \+\d+\n+(.*?)\n+)", gitlog)
    if len(a) > 0:
        m = a[0]
        grep_result["commit_head"] = m[0]
        grep_result["commit_auth"] = m[1]
        grep_result["commit_date"] = m[2]
        grep_result["commit_msg"] = str(m[3]).strip()
        grep_result["success"] = True
    return grep_result


def grep_gitlog_commitnewfile(gitlog):
    """
    正则匹配新增文件
    :param gitlog:
    :return:
    """
    commit_newfile = re.findall(r'\"?([\w\d\\\(\)\-\+\*\?\%]+\.md)\"?\n?', gitlog)
    if "README.md" in commit_newfile:
        commit_newfile.remove("README.md")
    return commit_newfile


def read_file(file_path):
    with open(file_path, "r", encoding="utf8") as f:
        return f.read()


def dingmsg_format(auth,date1,commit_msg,filename,filecontent):
    msg = f"""[微笑]新POC更新[微笑]
Date: {date1}
Auth: {auth}
Commit: {commit_msg}
File: {filename}
Content: {filecontent}
"""
    return msg


if __name__ == '__main__':
    returncode, stdout, stderr = exec_command("git log --name-only -n 1")
    print(returncode, stdout, stderr)

    try:
        print("start grep git log:")
        gitlog = stdout
        git_head_dict = grep_gitlog_head(gitlog)
        print(git_head_dict)
        if git_head_dict["success"]:
            commit_newfile = grep_gitlog_commitnewfile(gitlog)
            print(commit_newfile)
            for i in commit_newfile:
                print(i)
                print(read_file(i))
                msg = dingmsg_format(git_head_dict["commit_auth"],git_head_dict["commit_date"],git_head_dict["commit_msg"],i,read_file(i))
                # 发dingding
                dingding_sendmsg(msg, sys.argv[1], sys.argv[2])
        else:
            msg = "repo [POC] git log grep filed!"
            dingding_sendmsg(msg, sys.argv[1], sys.argv[2])
    except Exception as e:
        print(e)
        msg = f"repo [POC] python exec Exception {str(e)}"
        dingding_sendmsg(msg, sys.argv[1], sys.argv[2])
